/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal IF, ELSE;
terminal INT, RETURN, VOID, WHILE;
terminal EQ, LT, GT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREN, SEMI, UMINUS;
terminal LTE, GTE, COMPARE, NE, COMMA, SQLEFT, SQRIGHT, SQUIGLEFT, SQUIGRIGHT;
terminal String ID;
terminal String NUM;
terminal ERROR;

non terminal program; //done?
non terminal dec_list, dec, var_dec, fun_dec, params, comp_stmt, param_list, param, local_dec, stmt_list;
non terminal stmt;
non terminal Exp expr, factor; // done
non terminal Var var; // done
non terminal ExpList arg_list; // done
non terminal type_spec;

precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence right UMINUS; // add uminus rules?
precedence nonassoc EQ, LT, GT, LTE, GTE, NE, COMPARE;

/* ----------------------------Grammar Section-------------------- */

// TODO: add logic

start with program;

program     ::= dec_list:dl
			;

dec_list    ::= dec_list:dl dec:d
			|   dec:d
			;

dec         ::= var_dec:vd
			|   fun_dec:fd
			;

var_dec     ::= type_spec:ts ID SEMI
			|   type_spec:ts ID SQLEFT NUM SQRIGHT SEMI
			;

type_spec   ::= INT
			|   VOID
			;

fun_dec     ::= type_spec:ts ID LPAREN params:p RPAREN comp_stmt:cs
			;

params      ::= param_list:pl
			|   VOID
			;

param_list  ::= param_list:pl COMMA param:p
			|   param:p
			;

param       ::= type_spec:ts ID
			|   type_spec:ts ID SQLEFT SQRIGHT
			;

comp_stmt   ::= SQUIGLEFT local_dec:ld stmt_list:sl SQUIGRIGHT
			;

local_dec   ::= local_dec:ld var_dec:vd
			|
			;

stmt_list   ::= stmt_list:sl stmt:s
			|
			;

stmt        ::= comp_stmt:cs
			|   expr:e SEMI
            |   SEMI
			|   IF LPAREN expr:e RPAREN stmt:s
            |   IF LPAREN expr:e RPAREN stmt:s1 ELSE stmt:s2
//                {: RESULT = new IfExp(eleft,eright,e,s1,s2); :} //BROKEN
			|   WHILE:r LPAREN expr:e RPAREN stmt:s
//			    {: RESULT = new WhileExp(rleft,e,s); :} //BROKEN
			|   RETURN:r expr:e SEMI
			    {: RESULT = new ReturnExp(rleft, e); :}
            |   RETURN:r SEMI
                {: RESULT = new ReturnExp(rleft, null); :}
			;

expr        ::= var:v EQ expr:e
				{: RESULT = new AssignExp(vleft, v, e); :}
			|   expr:ae1 LTE expr:ae2
				{: RESULT = new OpExp(ae1left, ae1, OpExp.LTE, ae2); :}
            |   expr:ae1 LT expr:ae2
                {: RESULT = new OpExp(ae1left, ae1, OpExp.LT, ae2); :}
            |   expr:ae1 GT expr:ae2
                {: RESULT = new OpExp(ae1left, ae1, OpExp.GT, ae2); :}
            |   expr:ae1 GTE expr:ae2
                {: RESULT = new OpExp(ae1left, ae1, OpExp.GTE, ae2); :}
            |   expr:ae1 COMPARE expr:ae2
                {: RESULT = new OpExp(ae1left, ae1, OpExp.COMPARE, ae2); :}
            |   expr:ae1 NE expr:ae2
                {: RESULT = new OpExp(ae1left, ae1, OpExp.NE, ae2); :}
            |   expr:ae1 PLUS expr:ae2
                {: RESULT = new OpExp(ae1left, ae1, OpExp.PLUS, ae2); :}
            |   expr:ae1 MINUS expr:ae2
                {: RESULT = new OpExp(ae1left, ae1, OpExp.MINUS, ae2); :}
            |   expr:ae1 TIMES expr:ae2
                {: RESULT = new OpExp(ae1left, ae1, OpExp.TIMES, ae2); :}
            |   expr:ae1 OVER expr:ae2
                {: RESULT = new OpExp(ae1left, ae1, OpExp.OVER, ae2); :}
            |   factor:f // huh: correct class?
                {: RESULT = f; :}
            ;

var         ::= ID:i
				{: RESULT = new SimpleVar(ileft, i); :}
			|   ID:i SQLEFT expr:e SQRIGHT
				{: RESULT = new IndexVar(ileft, i, e); :}
			;

factor      ::= LPAREN expr:e RPAREN
				{: RESULT = e; :}
			|   var:v
				{: RESULT = new VarExp(vleft, v); :}
			|   ID:i LPAREN arg_list:al RPAREN
				{: RESULT = new CallExp(ileft, i, al); :}
			|   ID:i LPAREN RPAREN
				{: RESULT = new CallExp(ileft, i, null); :}
			|   NUM:n
				{:
				RESULT = new IntExp(nleft, Integer.parseInt(n)); :}
			;

arg_list    ::= arg_list:al COMMA expr:e
				{:  ExpList existingArgs = al;
					while (existingArgs.tail != null)
						existingArgs = existingArgs.tail;
					existingArgs.tail = new ExpList(e, null);
					RESULT = al;
				:}
			|   expr:e
				{: RESULT = new ExpList(e, null); :}
			;
